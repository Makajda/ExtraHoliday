@page "/Edit/{index:int}"

@inject JsInterop jsInterop
@inject NavigationManager navigationManager
@inject DataContext data

<MudStack Class="mt-8">
    @if (!isAdd) {
        <MudFab Color=Color.Primary Class="align-self-end" StartIcon=@Icons.Material.Filled.Add OnClick=Add Title="Добавить" />
    }
    <MudDatePicker @bind-Date=@date Class="mt-8" />
    <MudTextField @bind-Value=@name Immediate T=string Variant=@Variant.Outlined autocomplete="new-password" />

     <MudStack Row Justify=Justify.SpaceBetween Class="mud-width-full">
         <MudFab Color=Color.Dark StartIcon=@Icons.Material.Filled.Delete OnClick=Delete />
         <MudFab Color=Color.Success StartIcon=@Icons.Material.Filled.Check OnClick=Ok Title="Ok" />
     </MudStack>
 </MudStack>

 @code {
    [Parameter] public int Index { get; set; }
    Day day;
    string name;
    DateTime? date;
    bool isAdd;

    protected override void OnParametersSet() {
        day = data.Days[Index];
        date = day.Date;
        name = day.Name;
    }

    async Task Ok() {
        if (isAdd) {
            data.Days.Add(new Day { Date = date.Value, Name = name });
            await data.Save();
        }
        else
            await Save();

        await jsInterop.HistoryBack();
    }

    async Task Delete() {
        if (!isAdd) {
            data.Days.RemoveAt(Index);
            await data.Save();
        }

        await jsInterop.HistoryBack();
    }

    async Task Add() {
        await Save();
        isAdd = true;
        date = date.Value.AddDays(1);
        name = null;
    }

    async Task Save() {
        if (day.Date != date || day.Name != name) {
            day.Date = date.Value;
            day.Name = name;
            await data.Save();
        }
    }
}
