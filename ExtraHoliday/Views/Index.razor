@page "/"

@inject JsInterop jsInterop
@inject NavigationManager navigationManager
@inject DataContext data
@inject Calc calc

@if (hodas is null) return;

<MudStack>
    @foreach (var r in hodas) {
        @if (r == start) {
            <span @ref=startId />
        }
        <MudButton Class="pa-0" OnClick="()=>Open(r)">
            <MudStack Row Justify=Justify.SpaceBetween Spacing=0 Class="mud-width-full" Style=@GetStyle(r.Date)>
                 <MudText Class="ma-3" Style="color:darkgreen">@r.Date.ToString("MMM d, yyyy")</MudText>

                 <MudStack Class="ma-3 text-center">
                     <MudText Style="color:crimson">@r.Pitstop.Title: @r.Value.ToString("N0")</MudText>
                     <MudText><i>@r.Day.Name</i></MudText>
                 </MudStack>

                 <MudImage Src=@($"img/{r.Pitstop.Key}.png") Height="80" />
             </MudStack>
         </MudButton>
    }
</MudStack>

@code {
    ElementReference startId;
    IEnumerable<Hoda> hodas;
    Hoda start;

    protected override async Task OnInitializedAsync() {
        (hodas, start) = await calc.Recalc();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender)
            try {
                await jsInterop.ScrollToElement(startId);
            }
            catch (Exception) { }
    }

    string GetStyle(DateTime date) {
        var today = DateTime.Today;
        if (date < today) return "background-color:#F6E490";
        if (date > today) return "background-color:#90CEF6";
        return "background-color:#F7E2F7";
    }

    void Open(Hoda hoda) {
        navigationManager.NavigateTo($"/{nameof(Edit)}/{data.Days.IndexOf(hoda.Day)}");
    }
}
